/* Generated By:JavaCC: Do not edit this line. XPathParserConstants.java */
package org.xmodel.xpath.parser.generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface XPathParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LITERAL = 2;
  /** RegularExpression Id. */
  int _DIGIT_ = 3;
  /** RegularExpression Id. */
  int NUMBER = 4;
  /** RegularExpression Id. */
  int ABBREVIATED_ATTRIBUTE_AXIS = 5;
  /** RegularExpression Id. */
  int SLASH = 6;
  /** RegularExpression Id. */
  int EQ = 7;
  /** RegularExpression Id. */
  int LT = 8;
  /** RegularExpression Id. */
  int GT = 9;
  /** RegularExpression Id. */
  int PLUS = 10;
  /** RegularExpression Id. */
  int STAR = 11;
  /** RegularExpression Id. */
  int MINUS = 12;
  /** RegularExpression Id. */
  int UNION = 13;
  /** RegularExpression Id. */
  int SLASHSLASH = 14;
  /** RegularExpression Id. */
  int NEQ = 15;
  /** RegularExpression Id. */
  int LE = 16;
  /** RegularExpression Id. */
  int GE = 17;
  /** RegularExpression Id. */
  int ASSIGN = 18;
  /** RegularExpression Id. */
  int DOTDOT = 19;
  /** RegularExpression Id. */
  int OR = 20;
  /** RegularExpression Id. */
  int IN = 21;
  /** RegularExpression Id. */
  int IF = 22;
  /** RegularExpression Id. */
  int FOR = 23;
  /** RegularExpression Id. */
  int LET = 24;
  /** RegularExpression Id. */
  int AND = 25;
  /** RegularExpression Id. */
  int DIV = 26;
  /** RegularExpression Id. */
  int MOD = 27;
  /** RegularExpression Id. */
  int THEN = 28;
  /** RegularExpression Id. */
  int ELSE = 29;
  /** RegularExpression Id. */
  int AXIS_SELF = 30;
  /** RegularExpression Id. */
  int NT_TEXT = 31;
  /** RegularExpression Id. */
  int NT_NODE = 32;
  /** RegularExpression Id. */
  int AXIS_CHILD = 33;
  /** RegularExpression Id. */
  int RETURN = 34;
  /** RegularExpression Id. */
  int AXIS_NESTED = 35;
  /** RegularExpression Id. */
  int AXIS_PARENT = 36;
  /** RegularExpression Id. */
  int AXIS_ANCESTOR = 37;
  /** RegularExpression Id. */
  int NT_COMMENT = 38;
  /** RegularExpression Id. */
  int AXIS_FOLLOWING = 39;
  /** RegularExpression Id. */
  int AXIS_PRECEDING = 40;
  /** RegularExpression Id. */
  int AXIS_ATTRIBUTE = 41;
  /** RegularExpression Id. */
  int AXIS_NAMESPACE = 42;
  /** RegularExpression Id. */
  int AXIS_DESCENDANT = 43;
  /** RegularExpression Id. */
  int AXIS_NESTED_OR_SELF = 44;
  /** RegularExpression Id. */
  int AXIS_ANCESTOR_OR_SELF = 45;
  /** RegularExpression Id. */
  int AXIS_FOLLOWING_SIBLING = 46;
  /** RegularExpression Id. */
  int AXIS_PRECEDING_SIBLING = 47;
  /** RegularExpression Id. */
  int AXIS_DESCENDANT_OR_SELF = 48;
  /** RegularExpression Id. */
  int NT_PI = 49;
  /** RegularExpression Id. */
  int NCName = 50;
  /** RegularExpression Id. */
  int NCNameChar = 51;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<LITERAL>",
    "<_DIGIT_>",
    "<NUMBER>",
    "\"@\"",
    "\"/\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"+\"",
    "\"*\"",
    "\"-\"",
    "\"|\"",
    "\"//\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\":=\"",
    "\"::\"",
    "\"or\"",
    "\"in\"",
    "\"if\"",
    "\"for\"",
    "\"let\"",
    "\"and\"",
    "\"div\"",
    "\"mod\"",
    "\"then\"",
    "\"else\"",
    "\"self\"",
    "\"text()\"",
    "\"node()\"",
    "\"child\"",
    "\"return\"",
    "\"nested\"",
    "\"parent\"",
    "\"ancestor\"",
    "\"comment()\"",
    "\"following\"",
    "\"preceding\"",
    "\"attribute\"",
    "\"namespace\"",
    "\"descendant\"",
    "\"nested-or-self\"",
    "\"ancestor-or-self\"",
    "\"following-sibling\"",
    "\"preceding-sibling\"",
    "\"descendant-or-self\"",
    "<NT_PI>",
    "<NCName>",
    "<NCNameChar>",
    "\",\"",
    "\";\"",
    "\"$\"",
    "\".\"",
    "\"..\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\"[\"",
    "\"]\"",
  };

}
