/*
 * XPath 1.0 with XSLT 1.0 support
 *   Original Author: Marian Olteanu
 *   Rewritten By: Bob Dunnagan
 */
 
/*
options
{
  STATIC = false;
  CACHE_TOKENS = true;
  DEBUG_PARSER = true;
  DEBUG_TOKEN_MANAGER = true;
  DEBUG_LOOKAHEAD = false;
  ERROR_REPORTING = true;
}
*/

PARSER_BEGIN(XPathParser)

package org.xmodel.xpath.parser.generated;

import java.util.List;
import java.util.ArrayList;
import org.xmodel.*;
import org.xmodel.xpath.*;
import org.xmodel.xpath.expression.*;
import org.xmodel.xpath.function.*;
import org.xmodel.xpath.function.custom.*;
import org.xmodel.xpath.variable.*;

@SuppressWarnings("all")
public class XPathParser
{
  public void setSpec( String spec)
  {
    this.spec = spec;
  }
  
  /** Extracts the literal value from a token of type <LITERAL> */
  protected static String getLiteralValue( Token literal )
  {
    return literal.image.substring( 1, literal.image.length()-1 );
  }
  
  private static final IPathElement createStep( int axis, String nodeTest, PredicateExpression predicate)
  {
  	if ( nodeTest != null && nodeTest.equals( "text()")) axis = IAxis.ATTRIBUTE;
    if ( predicate != null) 
      return new PathElement( axis, nodeTest, predicate);
    return new PathElement( axis, nodeTest);
  }
  
  private static final void addDescendantStep( AbstractPath path, IPathElement step)
  {
    // step predicate will still belong to the same path so no need to update
    if ( step.axis() == IAxis.CHILD)
    {
      path.addElement( new PathElement( IAxis.DESCENDANT, step.type(), step.predicate()));
    }
    else
    {
      path.addElement( new PathElement( IAxis.DESCENDANT | IAxis.SELF, null, null));
      path.addElement( step);
    }
  }
  
  private static final IExpression createOR( IExpression lhs, IExpression rhs)
  {
    LogicalExpression.Operator operator = LogicalExpression.Operator.OR;
    return new LogicalExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createAND( IExpression lhs, IExpression rhs)
  {
    LogicalExpression.Operator operator = LogicalExpression.Operator.AND;
    return new LogicalExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createGT( IExpression lhs, IExpression rhs)
  {
    RelationalExpression.Operator operator = RelationalExpression.Operator.GT;
    return new RelationalExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createGE( IExpression lhs, IExpression rhs)
  {
    RelationalExpression.Operator operator = RelationalExpression.Operator.GE;
    return new RelationalExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createLT( IExpression lhs, IExpression rhs)
  {
    RelationalExpression.Operator operator = RelationalExpression.Operator.LT;
    return new RelationalExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createLE( IExpression lhs, IExpression rhs)
  {
    RelationalExpression.Operator operator = RelationalExpression.Operator.LE;
    return new RelationalExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createEQ( IExpression lhs, IExpression rhs)
  {
    EqualityExpression.Operator operator = EqualityExpression.Operator.EQ;
    return new EqualityExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createNEQ( IExpression lhs, IExpression rhs)
  {
    EqualityExpression.Operator operator = EqualityExpression.Operator.NEQ;
    return new EqualityExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createADD( IExpression lhs, IExpression rhs)
  {
    ArithmeticExpression.Operator operator = ArithmeticExpression.Operator.ADD;
    return new ArithmeticExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createSUB( IExpression lhs, IExpression rhs)
  {
    ArithmeticExpression.Operator operator = ArithmeticExpression.Operator.SUB;
    return new ArithmeticExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createMUL( IExpression lhs, IExpression rhs)
  {
    ArithmeticExpression.Operator operator = ArithmeticExpression.Operator.MUL;
    return new ArithmeticExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createDIV( IExpression lhs, IExpression rhs)
  {
    ArithmeticExpression.Operator operator = ArithmeticExpression.Operator.DIV;
    return new ArithmeticExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createMOD( IExpression lhs, IExpression rhs)
  {
    ArithmeticExpression.Operator operator = ArithmeticExpression.Operator.MOD;
    return new ArithmeticExpression( operator, lhs, rhs);
  }
  
  private static final IExpression createNEG( IExpression rhs)
  {
    return new NegateExpression( rhs);
  }
  
  private static final IExpression createUnion( IExpression lhs, IExpression rhs)
  {
    return new UnionExpression( lhs, rhs);
  }
  
  private static final IExpression createChildExtension( IExpression lhs, AbstractPath path)
  {
    return new FilteredExpression( lhs, new PathExpression( path));
  }

  private static final IExpression createDescendantExtension( IExpression lhs, AbstractPath path)
  {
  	IPathElement element = path.getPathElement( 0);
  	element.setAxis( IAxis.DESCENDANT);
    return new FilteredExpression( lhs, new PathExpression( path));
  }
  
  private final void createAbsolute( IPath relativePath, AbstractPath resultPath)
  {
    // create path and add root node
    IPathElement element = relativePath.getPathElement( 0);
    resultPath.addElement( new PathElement( IAxis.ROOT, element.type(), element.predicate()));
    
    // change the path to which the element predicate belongs
    PredicateExpression predicate = (PredicateExpression)element.predicate();
    if ( predicate != null) predicate.setParentPath( resultPath);
    
    // add other path elements (relative path must be discarded)
    for ( int i=1; i<relativePath.length(); i++)
    {
      element = relativePath.getPathElement( i);
      resultPath.addElement( element);

      // change the path to which the element predicate belongs
      predicate = (PredicateExpression)element.predicate();
      if ( predicate != null) predicate.setParentPath( resultPath);
    }
  }

  private final void createAbsoluteDescendant( IPath relativePath, AbstractPath resultPath)
  {
    // create path and add root node
    IPathElement element = relativePath.getPathElement( 0);
    resultPath.addElement( new PathElement( IAxis.ROOT, null, null));
    resultPath.addElement( new PathElement( (IAxis.DESCENDANT | IAxis.SELF), element.type(), element.predicate()));
    
    // change the path to which the element predicate belongs
    PredicateExpression predicate = (PredicateExpression)element.predicate();
    if ( predicate != null) predicate.setParentPath( resultPath);
    
    // add other path elements (relative path must be discarded)
    for ( int i=1; i<relativePath.length(); i++)
    {
      element = relativePath.getPathElement( i);
      resultPath.addElement( element);
      
      // change the path to which the element predicate belongs
      predicate = (PredicateExpression)element.predicate();
      if ( predicate != null) predicate.setParentPath( resultPath);
    }
  }

  private final void createAbsolute( AbstractPath resultPath)
  {
    resultPath.addElement( new PathElement( IAxis.ROOT));
  }
    
  String spec;
  RootExpression root;
}

PARSER_END(XPathParser)

SKIP:
{
  < " " | (["\n","\r","\t"])+>
}

TOKEN:
{
  <LITERAL:("\"" (~["\""])* "\"") | ("'"  (~["'"] )* "'" )>
  |  <#_DIGIT_:  ["0"-"9"] >
  |  <NUMBER:  (<_DIGIT_>)+ ("." (<_DIGIT_>)* )? (("e" | "E") ("-" | "+")? (<_DIGIT_>)+)? >
}

/* optimized for performance: sorted tokens by length (I think...) */
TOKEN:
{
  <ABBREVIATED_ATTRIBUTE_AXIS: "@">
    | <SLASH:      "/">
	| <EQ:         "=">
	| <LT:         "<">
	| <GT:         ">">
    | <PLUS:       "+">
    | <STAR:       "*">
    | <MINUS:      "-">
    | <UNION:      "|">
	
    | <SLASHSLASH: "//">
    | <NEQ:        "!=">
	| <LE:         "<=">
	| <GE:         ">=">
    | <ASSIGN:     ":=">
    | <DOTDOT:     "::">
    | <OR:         "or">
    | <IN:         "in">
    | <IF:         "if">
	
    | <FOR:        "for">
    | <LET:        "let">
    | <AND:        "and">
    | <DIV:        "div">
    | <MOD:        "mod">
    
    | <THEN:       "then">
    | <ELSE:       "else">
    | <AXIS_SELF:  "self">
	
    | <NT_TEXT:    "text()">
    | <NT_NODE:    "node()">
    | <AXIS_CHILD: "child">
    
    | <RETURN:          "return">
    | <AXIS_NESTED:     "nested">
    | <AXIS_PARENT:     "parent">
    
	| <AXIS_ANCESTOR:   "ancestor">
	
    | <NT_COMMENT:      "comment()">
	| <AXIS_FOLLOWING:  "following">
	| <AXIS_PRECEDING:  "preceding">
	| <AXIS_ATTRIBUTE:  "attribute">
	| <AXIS_NAMESPACE:  "namespace">
	
	| <AXIS_DESCENDANT: "descendant">
	
	| <AXIS_NESTED_OR_SELF:     "nested-or-self">
	| <AXIS_ANCESTOR_OR_SELF:   "ancestor-or-self">
    | <AXIS_FOLLOWING_SIBLING:  "following-sibling">
    | <AXIS_PRECEDING_SIBLING:  "preceding-sibling">
	| <AXIS_DESCENDANT_OR_SELF: "descendant-or-self">
	
    | <NT_PI: "processing-instruction" "(" (~[")"])* ")">
}

TOKEN:
{
  <NCName: (["a"-"z"] | ["A"-"Z"] | "_") (<NCNameChar>)* >  | <#NCNameChar: ["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "." | "-" | "_">}

// More XPath 1.0 comformant NCName that has characters that cause regex warnings
//
//TOKEN://{//  <NCName: (<Letter> | "_") (<NCNameChar>)* >//  | <#NCNameChar: <Letter> | <Digit> | "." | "-" | "_" | <CombiningChar> | <Extender> >//  | <#Letter: <BaseChar> | <Ideographic> >//  //  | <#BaseChar://      ["\u0041"-"\u005A"] | ["\u0061"-"\u007A"] | ["\u00C0"-"\u00D6"] | ["\u00D8"-"\u00F6"]//    | ["\u00F8"-"\u00FF"] | ["\u0100"-"\u0131"] | ["\u0134"-"\u013E"] | ["\u0141"-"\u0148"]//    | ["\u014A"-"\u017E"] | ["\u0180"-"\u01C3"] | ["\u01CD"-"\u01F0"] | ["\u01F4"-"\u01F5"]//    | ["\u01FA"-"\u0217"] | ["\u0250"-"\u02A8"] | ["\u02BB"-"\u02C1"] | "\u0386" | ["\u0388"-"\u038A"]//    | "\u038C" | ["\u038E"-"\u03A1"] | ["\u03A3"-"\u03CE"] | ["\u03D0"-"\u03D6"] | "\u03DA"//    | "\u03DC" | "\u03DE" | "\u03E0" | ["\u03E2"-"\u03F3"] | ["\u0401"-"\u040C"] | ["\u040E"-"\u044F"]//    | ["\u0451"-"\u045C"] | ["\u045E"-"\u0481"] | ["\u0490"-"\u04C4"] | ["\u04C7"-"\u04C8"]//    | ["\u04CB"-"\u04CC"] | ["\u04D0"-"\u04EB"] | ["\u04EE"-"\u04F5"] | ["\u04F8"-"\u04F9"]//    | ["\u0531"-"\u0556"] | "\u0559" | ["\u0561"-"\u0586"] | ["\u05D0"-"\u05EA"] | ["\u05F0"-"\u05F2"]//    | ["\u0621"-"\u063A"] | ["\u0641"-"\u064A"] | ["\u0671"-"\u06B7"] | ["\u06BA"-"\u06BE"]//    | ["\u06C0"-"\u06CE"] | ["\u06D0"-"\u06D3"] | "\u06D5" | ["\u06E5"-"\u06E6"] | ["\u0905"-"\u0939"]//    | "\u093D" | ["\u0958"-"\u0961"] | ["\u0985"-"\u098C"] | ["\u098F"-"\u0990"] | ["\u0993"-"\u09A8"]//    | ["\u09AA"-"\u09B0"] | "\u09B2" | ["\u09B6"-"\u09B9"] | ["\u09DC"-"\u09DD"] | ["\u09DF"-"\u09E1"]//    | ["\u09F0"-"\u09F1"] | ["\u0A05"-"\u0A0A"] | ["\u0A0F"-"\u0A10"] | ["\u0A13"-"\u0A28"]//    | ["\u0A2A"-"\u0A30"] | ["\u0A32"-"\u0A33"] | ["\u0A35"-"\u0A36"] | ["\u0A38"-"\u0A39"]//    | ["\u0A59"-"\u0A5C"] | "\u0A5E" | ["\u0A72"-"\u0A74"] | ["\u0A85"-"\u0A8B"] | "\u0A8D"//    | ["\u0A8F"-"\u0A91"] | ["\u0A93"-"\u0AA8"] | ["\u0AAA"-"\u0AB0"] | ["\u0AB2"-"\u0AB3"]//    | ["\u0AB5"-"\u0AB9"] | "\u0ABD" | "\u0AE0" | ["\u0B05"-"\u0B0C"] | ["\u0B0F"-"\u0B10"]//    | ["\u0B13"-"\u0B28"] | ["\u0B2A"-"\u0B30"] | ["\u0B32"-"\u0B33"] | ["\u0B36"-"\u0B39"]//    | "\u0B3D" | ["\u0B5C"-"\u0B5D"] | ["\u0B5F"-"\u0B61"] | ["\u0B85"-"\u0B8A"]//    | ["\u0B8E"-"\u0B90"] | ["\u0B92"-"\u0B95"] | ["\u0B99"-"\u0B9A"] | "\u0B9C" | ["\u0B9E"-"\u0B9F"]//    | ["\u0BA3"-"\u0BA4"] | ["\u0BA8"-"\u0BAA"] | ["\u0BAE"-"\u0BB5"] | ["\u0BB7"-"\u0BB9"]//    | ["\u0C05"-"\u0C0C"] | ["\u0C0E"-"\u0C10"] | ["\u0C12"-"\u0C28"] | ["\u0C2A"-"\u0C33"]//    | ["\u0C35"-"\u0C39"] | ["\u0C60"-"\u0C61"] | ["\u0C85"-"\u0C8C"] | ["\u0C8E"-"\u0C90"]//    | ["\u0C92"-"\u0CA8"] | ["\u0CAA"-"\u0CB3"] | ["\u0CB5"-"\u0CB9"] | "\u0CDE" | ["\u0CE0"-"\u0CE1"]//    | ["\u0D05"-"\u0D0C"] | ["\u0D0E"-"\u0D10"] | ["\u0D12"-"\u0D28"] | ["\u0D2A"-"\u0D39"]//    | ["\u0D60"-"\u0D61"] | ["\u0E01"-"\u0E2E"] | "\u0E30" | ["\u0E32"-"\u0E33"] | ["\u0E40"-"\u0E45"]//    | ["\u0E81"-"\u0E82"] | "\u0E84" | ["\u0E87"-"\u0E88"] | "\u0E8A" | "\u0E8D" | ["\u0E94"-"\u0E97"]//    | ["\u0E99"-"\u0E9F"] | ["\u0EA1"-"\u0EA3"] | "\u0EA5" | "\u0EA7" | ["\u0EAA"-"\u0EAB"]//    | ["\u0EAD"-"\u0EAE"] | "\u0EB0" | ["\u0EB2"-"\u0EB3"] | "\u0EBD" | ["\u0EC0"-"\u0EC4"]//    | ["\u0F40"-"\u0F47"] | ["\u0F49"-"\u0F69"] | ["\u10A0"-"\u10C5"] | ["\u10D0"-"\u10F6"] | "\u1100"//    | ["\u1102"-"\u1103"] | ["\u1105"-"\u1107"] | "\u1109" | ["\u110B"-"\u110C"] | ["\u110E"-"\u1112"]//    | "\u113C" | "\u113E" | "\u1140" | "\u114C" | "\u114E" | "\u1150" | ["\u1154"-"\u1155"] | "\u1159"//    | ["\u115F"-"\u1161"] | "\u1163" | "\u1165" | "\u1167" | "\u1169" | ["\u116D"-"\u116E"]//    | ["\u1172"-"\u1173"] | "\u1175" | "\u119E" | "\u11A8" | "\u11AB" | ["\u11AE"-"\u11AF"]//    | ["\u11B7"-"\u11B8"] | "\u11BA" | ["\u11BC"-"\u11C2"] | "\u11EB" | "\u11F0" | "\u11F9"//    | ["\u1E00"-"\u1E9B"] | ["\u1EA0"-"\u1EF9"] | ["\u1F00"-"\u1F15"] | ["\u1F18"-"\u1F1D"]//    | ["\u1F20"-"\u1F45"] | ["\u1F48"-"\u1F4D"] | ["\u1F50"-"\u1F57"] | "\u1F59" | "\u1F5B" | "\u1F5D"//    | ["\u1F5F"-"\u1F7D"] | ["\u1F80"-"\u1FB4"] | ["\u1FB6"-"\u1FBC"] | "\u1FBE" | ["\u1FC2"-"\u1FC4"]//    | ["\u1FC6"-"\u1FCC"] | ["\u1FD0"-"\u1FD3"] | ["\u1FD6"-"\u1FDB"] | ["\u1FE0"-"\u1FEC"]//    | ["\u1FF2"-"\u1FF4"] | ["\u1FF6"-"\u1FFC"] | "\u2126" | ["\u212A"-"\u212B"] | "\u212E"//    | ["\u2180"-"\u2182"] | ["\u3041"-"\u3094"] | ["\u30A1"-"\u30FA"] | ["\u3105"-"\u312C"]//    | ["\uAC00"-"\uD7A3"] >//  | <#Ideographic:    ["\u4E00"-"\u9FA5"] | "\u3007" | ["\u3021"-"\u3029"] > //  | <#CombiningChar://      ["\u0300"-"\u0345"] | ["\u0360"-"\u0361"] | ["\u0483"-"\u0486"] | ["\u0591"-"\u05A1"]//    | ["\u05A3"-"\u05B9"] | ["\u05BB"-"\u05BD"] | "\u05BF" | ["\u05C1"-"\u05C2"] | "\u05C4"//    | ["\u064B"-"\u0652"] | "\u0670" | ["\u06D6"-"\u06DC"] | ["\u06DD"-"\u06DF"]//    | ["\u06E0"-"\u06E4"] | ["\u06E7"-"\u06E8"] | ["\u06EA"-"\u06ED"] | ["\u0901"-"\u0903"]//    | "\u093C" | ["\u093E"-"\u094C"] | "\u094D" | ["\u0951"-"\u0954"] | ["\u0962"-"\u0963"]//    | ["\u0981"-"\u0983"] | "\u09BC" | "\u09BE" | "\u09BF" | ["\u09C0"-"\u09C4"] | ["\u09C7"-"\u09C8"]//    | ["\u09CB"-"\u09CD"] | "\u09D7" | ["\u09E2"-"\u09E3"] | "\u0A02" | "\u0A3C" | "\u0A3E"//    | "\u0A3F" | ["\u0A40"-"\u0A42"] | ["\u0A47"-"\u0A48"] | ["\u0A4B"-"\u0A4D"] | ["\u0A70"-"\u0A71"]//    | ["\u0A81"-"\u0A83"] | "\u0ABC" | ["\u0ABE"-"\u0AC5"] | ["\u0AC7"-"\u0AC9"] | ["\u0ACB"-"\u0ACD"]//    | ["\u0B01"-"\u0B03"] | "\u0B3C" | ["\u0B3E"-"\u0B43"] | ["\u0B47"-"\u0B48"] | ["\u0B4B"-"\u0B4D"]//    | ["\u0B56"-"\u0B57"] | ["\u0B82"-"\u0B83"] | ["\u0BBE"-"\u0BC2"] | ["\u0BC6"-"\u0BC8"]//    | ["\u0BCA"-"\u0BCD"] | "\u0BD7" | ["\u0C01"-"\u0C03"] | ["\u0C3E"-"\u0C44"] | ["\u0C46"-"\u0C48"]//    | ["\u0C4A"-"\u0C4D"] | ["\u0C55"-"\u0C56"] | ["\u0C82"-"\u0C83"] | ["\u0CBE"-"\u0CC4"]//    | ["\u0CC6"-"\u0CC8"] | ["\u0CCA"-"\u0CCD"] | ["\u0CD5"-"\u0CD6"] | ["\u0D02"-"\u0D03"]//    | ["\u0D3E"-"\u0D43"] | ["\u0D46"-"\u0D48"] | ["\u0D4A"-"\u0D4D"] | "\u0D57" | "\u0E31"//    | ["\u0E34"-"\u0E3A"] | ["\u0E47"-"\u0E4E"] | "\u0EB1" | ["\u0EB4"-"\u0EB9"]//    | ["\u0EBB"-"\u0EBC"] | ["\u0EC8"-"\u0ECD"] | ["\u0F18"-"\u0F19"] | "\u0F35" | "\u0F37" | "\u0F39"//    | "\u0F3E" | "\u0F3F" | ["\u0F71"-"\u0F84"] | ["\u0F86"-"\u0F8B"] | ["\u0F90"-"\u0F95"] | "\u0F97"//    | ["\u0F99"-"\u0FAD"] | ["\u0FB1"-"\u0FB7"] | "\u0FB9" | ["\u20D0"-"\u20DC"] | "\u20E1"//    | ["\u302A"-"\u302F"] | "\u3099" | "\u309A" >//  | <#Digit://      ["\u0030"-"\u0039"] | ["\u0660"-"\u0669"] | ["\u06F0"-"\u06F9"] | ["\u0966"-"\u096F"]//    | ["\u09E6"-"\u09EF"] | ["\u0A66"-"\u0A6F"] | ["\u0AE6"-"\u0AEF"] | ["\u0B66"-"\u0B6F"]//    | ["\u0BE7"-"\u0BEF"] | ["\u0C66"-"\u0C6F"] | ["\u0CE6"-"\u0CEF"] | ["\u0D66"-"\u0D6F"]//    | ["\u0E50"-"\u0E59"] | ["\u0ED0"-"\u0ED9"] | ["\u0F20"-"\u0F29"] >//  | <#Extender ://      "\u00B7" | "\u02D0" | "\u02D1" | "\u0387" | "\u0640" | "\u0E46" | "\u0EC6" | "\u3005"//    | ["\u3031"-"\u3035"] | ["\u309D"-"\u309E"] | ["\u30FC"-"\u30FE"] >//}

void Void():
{}
{
  {}
}

void ParsePath( AbstractPath path):
{}
{
  (AbsoluteLocationPath( path) 
  | RelativeLocationPath( path))
  <EOF>
}

List<IExpression> ParseExpressions():
{
  List<IExpression> expressions = new ArrayList<IExpression>( 5);
  RootExpression root = null;
  IExpression expression = null;
}
{
  (expression = Expr())      { root = new RootExpression( expression); expressions.add( root);}
  ((",") expression = Expr() { root = new RootExpression( expression); expressions.add( root);} )* 
  <EOF>
  {
    return expressions;  }
}

IExpression ParseExpression():
{
  boolean hasLet = false;
  LetExpression let = new LetExpression();
  IExpression expression = null;
}
{
  { root = new RootExpression();}
  
  (LetClause( root, let) { hasLet = true;})*
  (expression = Expr() (";")?)
  <EOF>
  {
    if ( hasLet)
    {
      let.addArgument( expression);
      root.addArgument( let);
      return root;
    }
    else
    {
      root.addArgument( expression);
      return root;
    }
  }
}

void LetClause( RootExpression root, LetExpression let):
{ 
  Token var;
  IExpression assignment = null;
}
{
  (<LET> ("$" var = <NCName>) <ASSIGN> assignment = Expr() ";")
  {
    // create new root expression with the same variable source
    IVariableSource source = root.getVariableSource();
    RootExpression letRoot = new RootExpression( assignment);
    let.addExpression( letRoot, var.image);
    letRoot.setVariableSource( source);
  }
}

void AbsoluteLocationPath( AbstractPath absolutePath): 
{
  AbstractPath relativePath = new CanonicalPath();
}
{
  ( <SLASHSLASH> RelativeLocationPath( relativePath) { createAbsoluteDescendant( relativePath, absolutePath);}
  | LOOKAHEAD( 2) <SLASH> RelativeLocationPath( relativePath) { createAbsolute( relativePath, absolutePath);}
  | <SLASH> { createAbsolute( absolutePath);} )
}

AbstractPath RelativeLocationPath( AbstractPath path): 
{
  IPathElement element;
}
{
  element = Step( path)                { path.addElement( element);}
  ( <SLASH> element = Step( path)      { path.addElement( element);} 
  | <SLASHSLASH> element = Step( path) { addDescendantStep( path, element);} )* 
  {
    return path;
  }
}

/**
 * Note that this method does not add the location step to the path argument.
 **/
IPathElement Step( IPath path):
{ 
  int axis;
  String nodeTest = null;
  PredicateExpression predicate = null;
}
{
  ( axis = AxisSpecifier()
    nodeTest = NodeTest() 
    predicate = PredicateList( path)) { return createStep( axis, nodeTest, predicate);}
  | ( "." predicate = PredicateList( path)) { return createStep( IAxis.SELF, null, predicate);}
  | ( ".." predicate = PredicateList( path)) { return createStep( IAxis.PARENT, null, predicate);}
}

int AxisSpecifier():
{ int axis;}
{
  <ABBREVIATED_ATTRIBUTE_AXIS> { return IAxis.ATTRIBUTE;}
  | LOOKAHEAD( NCName() <DOTDOT> )
    // if not, problems for child[1], token <child> would be consummed
    // NCName() "::" is more conformant to the specification
    axis = AxisName() { return axis;}
  |  Void()           { return IAxis.CHILD;}
}

int AxisName(): 
{ int axis = -1;}
{
  ( <AXIS_ANCESTOR>                  { axis = IAxis.ANCESTOR;}
    | <AXIS_ANCESTOR_OR_SELF>        { axis = IAxis.ANCESTOR | IAxis.SELF;}
    | <AXIS_ATTRIBUTE>               { axis = IAxis.ATTRIBUTE;}
    | <AXIS_CHILD>                   { axis = IAxis.CHILD;}
    | <AXIS_DESCENDANT>              { axis = IAxis.DESCENDANT;}
    | <AXIS_DESCENDANT_OR_SELF>      { axis = IAxis.DESCENDANT | IAxis.SELF;}
    | <AXIS_NESTED>                  { axis = IAxis.NESTED;}
    | <AXIS_NESTED_OR_SELF>          { axis = IAxis.NESTED | IAxis.SELF;}
    | <AXIS_FOLLOWING>               { axis = IAxis.FOLLOWING;}
    | <AXIS_FOLLOWING_SIBLING>       { axis = IAxis.FOLLOWING_SIBLING;}
    | <AXIS_NAMESPACE>               { axis = -1;}
    | <AXIS_PARENT>                  { axis = IAxis.PARENT;}
    | <AXIS_PRECEDING>               { axis = IAxis.PRECEDING;}
    | <AXIS_PRECEDING_SIBLING>       { axis = IAxis.PRECEDING_SIBLING;}
    | <AXIS_SELF>                    { axis = IAxis.SELF;}
  ) <DOTDOT> {}
  {
    if ( axis < 0) throw new ParseException( "Axis not supported: "+getToken( 0));
    return axis;
  }
}

String NodeTest():
{ String result = null;}
{
  LOOKAHEAD( NodeType() "(" ")" )
  result = NodeType() "(" ")" { return result+"()";}
  | result = NameTest() { return result;}
}

String NameTest():
{ String name = null;}
{
  <STAR>                             { return( null);}
  | LOOKAHEAD( NCName() ":" <STAR> )
    name = NCName() ":" <STAR>       { return( name+':'+'*');}
  | name = QName()                   { return( name);}
}

String NodeType(): 
{ 
  Token token = null;
  String pi = null;
}
{
  ( token = <NT_TEXT>
  | token = <NT_NODE>
  | (pi = ProcessingInstruction()))
  {
    return token.image;
  }
}

String ProcessingInstruction():
{ 
  Token target = null;
  String data = null;
}
{
  (target = <NT_PI>)
  {
    return target.image;
  }
}

IExpression PrimaryExpr():
{ 
  Token token;
  IExpression expression = null;
}
{
  ( "$" token = <NCName>) { return new VariableExpression( token.image);} 
  | ( "(" expression = Expr() ")") { return expression;}
  | token = <LITERAL> { return new LiteralExpression( getLiteralValue( token));}
  | token = <NUMBER>  { return new LiteralExpression( Double.parseDouble( token.image));}
  | expression = FunctionCall() { return expression;}
}

IExpression Expr():
{ IExpression expression = null;}
{
  LOOKAHEAD( ForExpr()) expression = ForExpr() { return expression; }
  | LOOKAHEAD( IfExpr()) expression = IfExpr() { return expression; }
  | expression = OrExpr() { return expression;}
}

IExpression ForExpr():
{
  Token var;
  IExpression expression;
  IExpression forExpression;
  IExpression nextExpression;
}
{
  <FOR> 
  ("$" var = <NCName>) <IN> (expression = Expr())  
  { 
    forExpression = new ForExpression( var.image);
    forExpression.addArgument( expression);
    nextExpression = forExpression;
  }
  
  ("," ("$" var = <NCName>) <IN> (expression = Expr())
  {
    ForExpression newExpression = new ForExpression( var.image);
    newExpression.addArgument( expression);
    nextExpression.addArgument( newExpression);
    nextExpression = newExpression;
  })*
  
  <RETURN> (expression = Expr())
  {
    nextExpression.addArgument( expression);
    return forExpression;
  }
}

IExpression IfExpr():
{
  IExpression condition;
  IExpression thenExpression;
  IExpression elseExpression;
}
{
  <IF> (condition = Expr())
  <THEN> ( thenExpression = Expr())
  <ELSE> ( elseExpression = Expr())
  {
    IfExpression expression = new IfExpression();
    expression.addArgument( condition);
    expression.addArgument( thenExpression);
    expression.addArgument( elseExpression);
    return expression;
  }
}

IExpression OrExpr(): 
{ 
  IExpression lhs = null;
  IExpression rhs = null;
}
{
  // this pattern results in left-associativity
  lhs = AndExpr()
  (<OR> rhs = AndExpr() { lhs = createOR( lhs, rhs);} )*
  {
    return lhs;
  }
}

IExpression AndExpr(): 
{
  IExpression lhs = null;
  IExpression rhs = null;
}
{
  lhs = EqualityExpr()
  (<AND> rhs = EqualityExpr() { lhs = createAND( lhs, rhs);} )*
  {
    return lhs;
  }
}

IExpression EqualityExpr(): 
{
  IExpression lhs = null;
  IExpression rhs = null;
}
{
  lhs = RelationalExpr()
  ( (<EQ> rhs = RelationalExpr() { lhs = createEQ( lhs, rhs);} )
  | (<NEQ> rhs = RelationalExpr() { lhs = createNEQ( lhs, rhs);} ))*
  {
    return lhs;
  }
}

IExpression RelationalExpr(): 
{
  IExpression lhs = null;
  IExpression rhs = null;
}
{
  lhs = AdditiveExpr()
  ( (<LT> rhs = AdditiveExpr() { lhs = createLT( lhs, rhs);} )
  | (<GT> rhs = AdditiveExpr() { lhs = createGT( lhs, rhs);} )
  | (<LE> rhs = AdditiveExpr() { lhs = createLE( lhs, rhs);} )
  | (<GE> rhs = AdditiveExpr() { lhs = createGE( lhs, rhs);} ))*
  {
    return lhs;
  }
}

IExpression AdditiveExpr(): 
{
  IExpression lhs = null;
  IExpression rhs = null;
}
{
  lhs = MultiplicativeExpr()
  ( (<PLUS> rhs = MultiplicativeExpr() { lhs = createADD( lhs, rhs);} )
  | (<MINUS> rhs = MultiplicativeExpr() { lhs = createSUB( lhs, rhs);} ))*
  {
    return lhs;
  }
}

IExpression MultiplicativeExpr(): 
{
  IExpression lhs = null;
  IExpression rhs = null;
}
{
  lhs = UnaryExpr()
  ( <DIV> rhs = UnaryExpr() { lhs = createDIV( lhs, rhs);}
  | <MOD> rhs = UnaryExpr() { lhs = createMOD( lhs, rhs);}
  | <STAR> rhs = UnaryExpr() { lhs = createMUL( lhs, rhs);} )*
  {
    return lhs;
  }
}

IExpression UnaryExpr(): 
{
  IExpression expression = null;
}
{
  <MINUS> expression = UnaryExpr() { return createNEG( expression);}
  | expression = UnionExpr() { return expression;}
}

IExpression UnionExpr(): 
{
  IExpression lhs = null;
  IExpression rhs = null;
}
{
  lhs = PathExpr() 
  (<UNION> rhs = PathExpr() { lhs = createUnion( lhs, rhs);} )*
  {
    return lhs;
  }
}

IExpression FilterExpr(): 
{
  IExpression expression = null;
  IExpression predicate = null;
}
{
  expression = PrimaryExpr()
  predicate = PredicateList( null)
  {
    if ( predicate == null) return expression;
    return new FilteredExpression( expression, predicate);
  }
}

PredicateExpression PredicateList( IPath path):
{
  PredicateExpression predicate = new PredicateExpression( path);
  IExpression rhs = null;
}
{
  (rhs = Predicate() { predicate.addArgument( rhs);} )*
  {
    List arguments = predicate.getArguments();
    if ( arguments.size() > 0) return predicate;
    return null;
  }
}

IExpression Predicate(): 
{
  IExpression expression = null;
}
{
  "[" expression = Expr() "]" { return expression;}
}

IExpression FunctionCall(): 
{ 
  IExpression function = null;
  IExpression expression = null;
}
{
  function = FunctionName()
  "(" ( expression = Expr() { function.addArgument( expression);} 
        ( "," expression = Expr() { function.addArgument( expression);} )* 
      )? 
  ")" { return function;}
}

IExpression FunctionName(): 
{ String name = null;}
{
  name = QNameWithoutNodeType() 
  {
    IExpression function = FunctionFactory.getInstance().createFunction( name);
    if ( function == null) throw new ParseException( "Undefined function: "+name);
    return function;
  }
}

IExpression PathExpr():  
{
  AbstractPath path = new CanonicalPath( root);
  IExpression lhs = null;
}
{
  (AbsoluteLocationPath( path) { lhs = new PathExpression( path);}
  | LOOKAHEAD( PrimaryExpr()) lhs = FilterExpr()
  ( (<SLASH> RelativeLocationPath( path)) { lhs = createChildExtension( lhs, path);} 
  | (<SLASHSLASH> RelativeLocationPath( path)) { lhs = createDescendantExtension( lhs, path);} )?
  | RelativeLocationPath( path) { lhs = new PathExpression( path);} )
  {
    return lhs;
  }
}

String QName():
{
  String lhs = null;
  String rhs = null;
}
{
  lhs = NCName() ( ":" rhs = NCName() )?
  {
    if( rhs != null)
    {
      return lhs+":"+rhs;
    }
    else
    {
      return lhs;
    }
  }
}

String QNameWithoutNodeType() :
{ 
  String prefix = null;
  String local;
}
{
  (
    LOOKAHEAD( NCName() ":" )
    prefix = NCName() ":" local = NCName()
    | local = NCNameWithoutNodeType()
  )
  {
    if ( prefix == null) return local;
    return prefix+":"+local;
  }
}

String NCName():
{ Token t;}
{
  (  t = <NCName>
  
  |  t = <IF>
  |  t = <ELSE>
  |  t = <THEN>
  
  |  t = <FOR>
  |  t = <IN>
  |  t = <RETURN>
  
  |  t = <OR>
  |  t = <AND>
  |  t = <DIV>
  |  t = <MOD>

  |  t = <AXIS_ANCESTOR>
  |  t = <AXIS_ANCESTOR_OR_SELF>
  |  t = <AXIS_ATTRIBUTE>
  |  t = <AXIS_CHILD>
  |  t = <AXIS_DESCENDANT>
  |  t = <AXIS_DESCENDANT_OR_SELF>
  |  t = <AXIS_NESTED>
  |  t = <AXIS_NESTED_OR_SELF>
  |  t = <AXIS_FOLLOWING>
  |  t = <AXIS_FOLLOWING_SIBLING>
  |  t = <AXIS_NAMESPACE>
  |  t = <AXIS_PARENT>
  |  t = <AXIS_PRECEDING>
  |  t = <AXIS_PRECEDING_SIBLING>
  |  t = <AXIS_SELF>

  |  t = <NT_COMMENT>
  |  t = <NT_TEXT>
  |  t = <NT_PI>
  |  t = <NT_NODE> )
  {
    return t.image;
  }
}

/* used for QName - NCName */
String NCNameWithoutNodeType():
{ Token t;}
{
  (  t = <NCName>
  
  |  t = <IF>
  |  t = <ELSE>
  |  t = <THEN>
  
  |  t = <FOR>
  |  t = <IN>
  |  t = <RETURN>
  
  |  t = <OR>
  |  t = <AND>
  |  t = <DIV>
  |  t = <MOD>

  |  t = <AXIS_ANCESTOR>
  |  t = <AXIS_ANCESTOR_OR_SELF>
  |  t = <AXIS_ATTRIBUTE>
  |  t = <AXIS_CHILD>
  |  t = <AXIS_DESCENDANT>
  |  t = <AXIS_DESCENDANT_OR_SELF>
  |  t = <AXIS_NESTED>
  |  t = <AXIS_NESTED_OR_SELF>
  |  t = <AXIS_FOLLOWING>
  |  t = <AXIS_FOLLOWING_SIBLING>
  |  t = <AXIS_NAMESPACE>
  |  t = <AXIS_PARENT>
  |  t = <AXIS_PRECEDING>
  |  t = <AXIS_PRECEDING_SIBLING>
  |  t = <AXIS_SELF> )
  {
    return t.image;
  }
}
